1. public -- objects that implement public access modifiers are accessible from everywhere in a project without any restrictions.
   private -- objects that implement public access modifiers are accessible only inside a class or a structure.
   protected -- the object is accessible inside the class and in all classes that derive from that class.
   internal -- the access is limited exclusively to classes defined within the current project assembly.
   protected internal -- a combination of protected and internal. we can access the protected internal member only in same assembly or in a derived class in other assemblies.
   private protected -- a combination of private and protected. we can access members inside the containing class or in a class that derives from a containing class, but only in the same assembly (project).

2. const -- use it if you know the value will never change for any reason.
   static -- use it if you need a field to be a property of a type, and not a property of an instance of that type.
   readlony -- use it if you are unsure of whether or not the value will change, but you don't want other classes or code to be able to change it.

3. constructor is a special method of a class or structure that initializes a newly created object of that type. whenever an object is created, the constructor is called automatically.

4. the partial keyword indicates that other parts of the class, struct, or interface can be defined in the namespace. All the parts must use the 'partial' keyword. All the parts must be available at compile time to form the final type. all the parts must have the same accessibility.

5. tuple is a data structure with consists of the mutilple parts.

6. it defines a reference type that provides built-in functionality for encapsulation data.

7. overloading means two or more methods in one class have the same method name but different paramenters;
   overriding mean two methods have the same method name and parameters.

8. a field is a variable of any type that is declared directly in a class;
   a property is a member that provides a flexible mechanism to read, write or compute that value of a private field.

9. we can use default value, or method overloading, or OptionalAttribute, or Params keyword.

10. abstract class permits you to make functionality that subclasses can implement or override;
    interface only permits you to state functionality but not implement it.
    a class can extend only one abstruct class while a class can implement multiple interfaces.

11. public. because the purpose of interface is to enable other types to access a class ot struct.

12. true

13. true

14. false

15. false

16. false

17. true

18. true

19. false

20. false

21. true

22. false

23. true

